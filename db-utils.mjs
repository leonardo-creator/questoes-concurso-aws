#!/usr/bin/env node
/**
 * Utilit√°rios para gerenciamento do banco de dados
 * 
 * Scripts auxiliares para limpeza, verifica√ß√£o e manuten√ß√£o do banco
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

/**
 * Remove todas as quest√µes duplicadas baseadas no questaoId
 */
async function removeDuplicates() {
  console.log('üßπ Iniciando remo√ß√£o de duplicatas...');
  
  try {
    // Encontrar duplicatas
    const duplicates = await prisma.$queryRaw`
      SELECT "questaoId", COUNT(*) as count 
      FROM questions 
      GROUP BY "questaoId" 
      HAVING COUNT(*) > 1
      ORDER BY count DESC
    `;
    
    if (duplicates.length === 0) {
      console.log('‚úÖ Nenhuma duplicata encontrada');
      return;
    }
    
    console.log(`üìä Encontradas ${duplicates.length} quest√µes com duplicatas`);
    
    let totalRemoved = 0;
    
    for (const duplicate of duplicates) {
      const questaoId = duplicate.questaoId;
      const count = Number(duplicate.count);
      
      console.log(`üîç Processando quest√£o ${questaoId} (${count} duplicatas)...`);
      
      // Buscar todos os registros duplicados
      const records = await prisma.question.findMany({
        where: { questaoId },
        orderBy: [
          { createdAt: 'desc' }, // Manter o mais recente
          { id: 'asc' } // Crit√©rio de desempate
        ]
      });
      
      // Manter apenas o primeiro (mais recente)
      const recordsToDelete = records.slice(1);
      
      // Deletar os duplicados
      for (const record of recordsToDelete) {
        await prisma.question.delete({
          where: { id: record.id }
        });
        totalRemoved++;
      }
      
      console.log(`   ‚úÖ Removidas ${recordsToDelete.length} duplicatas`);
    }
    
    console.log(`üéâ Remo√ß√£o conclu√≠da! Total removido: ${totalRemoved} registros`);
    
  } catch (error) {
    console.error('‚ùå Erro ao remover duplicatas:', error);
  }
}

/**
 * Limpa completamente a tabela de quest√µes
 */
async function clearAllQuestions() {
  console.log('‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° remover TODAS as quest√µes!');
  console.log('   Esta a√ß√£o √© irrevers√≠vel.');
  
  try {
    const count = await prisma.question.count();
    console.log(`üìä Total de quest√µes a serem removidas: ${count.toLocaleString()}`);
    
    if (count === 0) {
      console.log('‚úÖ Tabela j√° est√° vazia');
      return;
    }
    
    // Confirmar opera√ß√£o
    if (!process.argv.includes('--force')) {
      console.log('\nüí° Para confirmar, execute novamente com --force');
      return;
    }
    
    console.log('üóëÔ∏è  Removendo todas as quest√µes...');
    const result = await prisma.question.deleteMany({});
    
    console.log(`‚úÖ ${result.count.toLocaleString()} quest√µes removidas com sucesso`);
    
    // Resetar estat√≠sticas
    await prisma.questionStats.deleteMany({});
    console.log('üìä Estat√≠sticas resetadas');
    
  } catch (error) {
    console.error('‚ùå Erro ao limpar quest√µes:', error);
  }
}

/**
 * Exibe estat√≠sticas detalhadas do banco
 */
async function showStats() {
  console.log('üìä Coletando estat√≠sticas do banco...\n');
  
  try {
    const [
      totalQuestoes,
      duplicateStats,
      bancasStats,
      anosStats,
      dificuldadeStats,
      tipoStats
    ] = await Promise.all([
      prisma.question.count(),
      
      // Verificar duplicatas
      prisma.$queryRaw`
        SELECT COUNT(*) as duplicates
        FROM (
          SELECT "questaoId"
          FROM questions 
          GROUP BY "questaoId" 
          HAVING COUNT(*) > 1
        ) as dups
      `,
      
      // Top bancas
      prisma.question.groupBy({
        by: ['bancasSigla'],
        _count: { bancasSigla: true },
        orderBy: { _count: { bancasSigla: 'desc' } },
        take: 10
      }),
      
      // Anos dispon√≠veis
      prisma.question.groupBy({
        by: ['anos'],
        _count: { anos: true },
        orderBy: { anos: 'desc' },
        take: 10
      }),
      
      // Distribui√ß√£o por dificuldade
      prisma.question.groupBy({
        by: ['dificuldade'],
        _count: { dificuldade: true },
        orderBy: { dificuldade: 'asc' }
      }),
      
      // Tipos de quest√£o
      prisma.question.groupBy({
        by: ['tipo'],
        _count: { tipo: true },
        orderBy: { _count: { tipo: 'desc' } }
      })
    ]);
    
    console.log('=' .repeat(60));
    console.log('üìà ESTAT√çSTICAS GERAIS');
    console.log('=' .repeat(60));
    console.log(`Total de quest√µes: ${totalQuestoes.toLocaleString()}`);
    console.log(`Duplicatas encontradas: ${Number(duplicateStats[0]?.duplicates || 0)}`);
    
    console.log('\nüìö TOP 10 BANCAS:');
    bancasStats.forEach((banca, index) => {
      const sigla = banca.bancasSigla || 'N√£o informado';
      const count = banca._count.bancasSigla;
      console.log(`  ${index + 1}. ${sigla}: ${count.toLocaleString()} quest√µes`);
    });
    
    console.log('\nüìÖ QUEST√ïES POR ANO (√∫ltimos 10):');
    anosStats.forEach((ano, index) => {
      console.log(`  ${index + 1}. ${ano.anos}: ${ano._count.anos.toLocaleString()} quest√µes`);
    });
    
    console.log('\n‚≠ê DISTRIBUI√á√ÉO POR DIFICULDADE:');
    dificuldadeStats.forEach((diff) => {
      const nivel = diff.dificuldade;
      const descricao = ['', 'Muito F√°cil', 'F√°cil', 'M√©dio', 'Dif√≠cil', 'Muito Dif√≠cil'][nivel] || `N√≠vel ${nivel}`;
      console.log(`  ${descricao}: ${diff._count.dificuldade.toLocaleString()} quest√µes`);
    });
    
    console.log('\nüìù TIPOS DE QUEST√ÉO:');
    tipoStats.forEach((tipo) => {
      const tipoNome = tipo.tipo || 'N√£o informado';
      console.log(`  ${tipoNome}: ${tipo._count.tipo.toLocaleString()} quest√µes`);
    });
    
    console.log('\n' + '=' .repeat(60));
    
  } catch (error) {
    console.error('‚ùå Erro ao coletar estat√≠sticas:', error);
  }
}

/**
 * Verifica a integridade dos dados
 */
async function verifyIntegrity() {
  console.log('üîç Verificando integridade dos dados...\n');
  
  try {
    // Verificar campos obrigat√≥rios vazios
    const emptyFields = await Promise.all([
      prisma.question.count({ where: { questaoId: null } }),
      prisma.question.count({ where: { codigoReal: '' } }),
      prisma.question.count({ where: { enunciado: '' } }),
      prisma.question.count({ where: { resposta: '' } })
    ]);
    
    console.log('üìã CAMPOS OBRIGAT√ìRIOS:');
    console.log(`  questaoId nulos: ${emptyFields[0]}`);
    console.log(`  codigoReal vazios: ${emptyFields[1]}`);
    console.log(`  enunciado vazios: ${emptyFields[2]}`);
    console.log(`  resposta vazias: ${emptyFields[3]}`);
    
    // Verificar quest√µes com itens malformados
    const questionsWithBadItens = await prisma.$queryRaw`
      SELECT COUNT(*) as count
      FROM questions 
      WHERE itens::text = '[]' OR itens IS NULL
    `;
    
    console.log(`  itens vazios/nulos: ${Number(questionsWithBadItens[0]?.count || 0)}`);
    
    // Verificar unicidade de questaoId
    const duplicateQuestaoIds = await prisma.$queryRaw`
      SELECT "questaoId", COUNT(*) as count
      FROM questions 
      GROUP BY "questaoId" 
      HAVING COUNT(*) > 1
      LIMIT 5
    `;
    
    if (duplicateQuestaoIds.length > 0) {
      console.log('\n‚ö†Ô∏è  QUEST√ïES DUPLICADAS (primeiras 5):');
      duplicateQuestaoIds.forEach(dup => {
        console.log(`  questaoId ${dup.questaoId}: ${dup.count} registros`);
      });
    } else {
      console.log('\n‚úÖ Nenhuma duplicata de questaoId encontrada');
    }
    
    // Verificar unicidade de codigoReal
    const duplicateCodigoReal = await prisma.$queryRaw`
      SELECT "codigoReal", COUNT(*) as count
      FROM questions 
      WHERE "codigoReal" != ''
      GROUP BY "codigoReal" 
      HAVING COUNT(*) > 1
      LIMIT 5
    `;
    
    if (duplicateCodigoReal.length > 0) {
      console.log('\n‚ö†Ô∏è  C√ìDIGOS REAIS DUPLICADOS (primeiros 5):');
      duplicateCodigoReal.forEach(dup => {
        console.log(`  codigoReal ${dup.codigoReal}: ${dup.count} registros`);
      });
    } else {
      console.log('\n‚úÖ Nenhuma duplicata de codigoReal encontrada');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar integridade:', error);
  }
}

/**
 * Fun√ß√£o principal
 */
async function main() {
  const command = process.argv[2];
  
  if (!command) {
    console.log(`
üõ†Ô∏è  Utilit√°rios do Banco de Dados

Comandos dispon√≠veis:
  stats           - Exibir estat√≠sticas detalhadas
  duplicates      - Remover quest√µes duplicadas
  clear           - Limpar todas as quest√µes (use --force para confirmar)
  integrity       - Verificar integridade dos dados
  
Exemplos:
  node db-utils.mjs stats
  node db-utils.mjs duplicates
  node db-utils.mjs clear --force
  node db-utils.mjs integrity
`);
    return;
  }
  
  try {
    await prisma.$connect();
    console.log('‚úÖ Conectado ao banco de dados\n');
    
    switch (command) {
      case 'stats':
        await showStats();
        break;
      case 'duplicates':
        await removeDuplicates();
        break;
      case 'clear':
        await clearAllQuestions();
        break;
      case 'integrity':
        await verifyIntegrity();
        break;
      default:
        console.log(`‚ùå Comando desconhecido: ${command}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
    console.log('\nüîå Conex√£o encerrada');
  }
}

main().catch(console.error);
