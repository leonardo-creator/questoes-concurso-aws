// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  answers     Answer[]
  customLists CustomList[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Answer {
  id                     String   @id @default(cuid())
  userId                 String
  questaoCodigoReal      String
  alternativaSelecionada String
  acertou                Boolean
  tempoResposta          Int?     // em segundos
  createdAt              DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questaoCodigoReal])
  @@index([userId])
  @@index([questaoCodigoReal])
  @@index([userId, acertou])
  @@map("answers")
}

model CustomList {
  id            String   @id @default(cuid())
  userId        String
  nome          String
  descricao     String?
  questionCodes String[] // Array de codigo_real
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("custom_lists")
}

// Modelo para armazenar ações offline que precisam ser sincronizadas
model OfflineAction {
  id           String   @id @default(cuid())
  userId       String
  tipo         String   // 'resposta', 'criar_caderno', 'editar_caderno', 'excluir_caderno'
  dados        Json
  timestamp    BigInt
  sincronizado Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@index([userId, sincronizado])
  @@index([timestamp])
  @@map("offline_actions")
}
